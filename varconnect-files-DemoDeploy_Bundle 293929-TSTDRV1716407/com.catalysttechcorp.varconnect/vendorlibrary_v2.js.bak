/** 
* vendorlibrary_v2.js
* @NApiVersion 2.x
* @NModuleScope Public
**/

define(['N/search', 'N/runtime', 'N/record', 'N/xml','N/https', './VC_Globals.js'],
    function(search, runtime, r, xml, https, vcGlobals) {

        function handleSynnex(poNum) {
            log.audit("handleSynnex");

            var responseXML = requestSynnex(poNum);
            log.debug('after requestSynnex', responseXML)

            if (responseXML != null){
                var outputArr = parseSynnex(responseXML);
            } else {
                var outputArr = null;
            }
            var outputObj = {"xmlString": responseXML, "itemArray": outputArr};

            return outputObj;
        };

        function requestSynnex(poNum) {
            log.audit('requestSynnex');
            log.debug('Synnex Scheduled', 'Processing Synnex PO '+poNum );

            var xmlorderStatus;

            var credentials = decodeCredentials("Synnex", poNum);
            
            log.debug('credentials', credentials)
            if (credentials == null) return (null);
            if (isEmpty(credentials.userName) || isEmpty(credentials.password) || isEmpty(credentials.customerNum)) return ("Synnex Credentials missing")

            var userName = credentials.userName;
            var password = credentials.password;
            var customerNumber = credentials.customerNum;
            log.debug('credentials', credentials)

            var custPONumber = poNum;
            var requestURL = "https://ec.synnex.com/SynnexXML/POStatus";

            var orderXMLLineData = [];

            xmlorderStatus =
                '<?xml version="1.0" encoding="UTF-8" ?>' +
                '<SynnexB2B version="2.2">' +
                '<Credential>' +
                '<UserID>' + userName + '</UserID>' +
                '<Password>' + password + '</Password>' +
                '</Credential>' +
                '<OrderStatusRequest>' +
                '<CustomerNumber>' + customerNumber + '</CustomerNumber>' +
                '<PONumber>' + custPONumber + '</PONumber>' +
                '</OrderStatusRequest>' +
                '</SynnexB2B>';

            var headers = {
                'Content-Type': 'text/xml; charset=utf-8',
                'Content-Length': 'length'
            };

            var responseXML;
            log.debug('prerequest')
            try {
                var response = https.post({
                    url: requestURL,
                    body: xmlorderStatus,
                    headers: headers
                });
                responseXML = response.body;
                log.debug({
                    title: 'Synnex Scheduled',
                    details: 'length of response '+responseXML.length
                });

            }
            catch (err) {
                log.error({
                    title: 'Synnex scheduled',
                    details: 'error = '+err.message
                });
                responseXML = null;
            }

            return responseXML;
        }

        function parseSynnex(xmlString) {
            log.audit('parseSynnex', xmlString);

            try{
                var itemArray = [];
                var xmlDoc = xml.Parser.fromString({
                    text : xmlString
                });

                var itemNodesArray = xmlDoc.getElementsByTagName({tagName:'Item'});
                var orderDateTime = xmlDoc.getElementsByTagName({tagName:'PODatetime'});

                for (var i = 0; i < itemNodesArray.length; i++) {
                    var itemRow = {line_num:"NA", item_num:"NA", order_num:"NA", order_date:"NA", order_eta:"NA", ship_qty:"NA", ship_date:"NA", tracking_num:"NA", vendorSKU: "NA", carrier:"NA", serial_num:"NA"};
                    var itemCode = '';

                    var itemNode = itemNodesArray[i];

                    itemRow.line_num = itemNode.getAttribute({name: 'lineNumber'});
                    itemRow.order_date = orderDateTime[0].textContent;

                    var itemChildNodes = itemNode.childNodes;
                    var packageNodes;
                    for (var j = 0; j < itemChildNodes.length; j++) {
                        switch (itemChildNodes[j].nodeName) {
                            case 'Code' :					itemCode = itemChildNodes[j].textContent;
                                break;
                            case 'OrderNumber' : 			itemRow.order_num = itemChildNodes[j].textContent;
                                break;
                            case 'MfgPN' : 					itemRow.item_num = itemChildNodes[j].textContent;
                                break;
                            case 'ShipDatetime' : 			itemRow.ship_date = itemChildNodes[j].textContent;
                                break;
                            case 'SKU' : 		        	itemRow.vendorSKU = itemChildNodes[j].textContent;
                                break;
                            case 'ShipMethodDescription' : 	itemRow.carrier = itemChildNodes[j].textContent;
                                break;
                            case 'ShipQuantity' : 			itemRow.ship_qty = itemChildNodes[j].textContent;
                                break;
                            case 'Packages' : 				packageNodes = itemChildNodes[j].childNodes;
                                for (var x = 0; x < packageNodes.length; x++) {
                                    if (packageNodes[x].nodeName == 'Package') {
                                        var packageChildNodes = packageNodes[x].childNodes;
                                        for (var z = 0; z < packageChildNodes.length; z++) {
                                            switch (packageChildNodes[z].nodeName) {
                                                case 'TrackingNumber' :	if (itemRow.tracking_num === 'NA')
                                                    itemRow.tracking_num = packageChildNodes[z].textContent;
                                                else
                                                    itemRow.tracking_num += ',' + packageChildNodes[z].textContent;
                                                    break;
                                                case 'SerialNo' : 	if (itemRow.serial_num === 'NA')
                                                    itemRow.serial_num = packageChildNodes[z].textContent;
                                                else
                                                    itemRow.serial_num += ',' + packageChildNodes[z].textContent;
                                                    break;
                                            };
                                        };
                                    };
                                };
                                break;
                        }
                    }

                    // ignore items unles they have been invoiced
                    if (itemCode == 'invoiced') {
                        itemArray.push(itemRow);
                    }
                }
            }
            catch (err) {
                log.error({
                    title: 'Synnex Parse ERRROR',
                    details: 'error = '+err.message
                });

            }
            log.debug('exiting Parse Synnex', itemArray);
            return itemArray;
        }

        //****************************************************************
        //** D and H Code
        //****************************************************************
        function handleDandH(poNum) {
            //stub function that handles everything for d and h
            log.debug("handle D and H");

            var responseXML = requestDandH(poNum);

            if (responseXML != null){
                var outputArr = parseDandH(responseXML);
            } else {
                var outputArr = null;
            }

            var outputObj = {"xmlString": responseXML, "itemArray": outputArr};
            return outputObj;

        }

        function requestDandH(poNum) {
            log.debug("request d and h");

            var xmlorderStatus;
            var xmlInvoiceByPOStatus;


            var credentials = decodeCredentials("DandH", poNum)
            if (credentials == null) return (null);
            if (isEmpty(credentials.userName) || isEmpty(credentials.password)) return ("DandH Credentials missing")

            var userName = credentials.userName;
            var password = credentials.password;


            var custPONumber = poNum;
            var requestURL = "https://www.dandh.com/dhXML/xmlDispatch";

            var orderXMLLineData = [];

            xmlorderStatus =
                '<XMLFORMPOST>' +
                '<REQUEST>orderStatus</REQUEST>' +
                '<LOGIN>' +
                '<USERID>' + userName + '</USERID>' +
                '<PASSWORD>' + password + '</PASSWORD>' +
                '</LOGIN>' +
                '<STATUSREQUEST>' +
                '<PONUM>' + custPONumber + '</PONUM>' +
                '</STATUSREQUEST>' +
                '</XMLFORMPOST>';

            var headers = {
                'Content-Type': 'text/xml; charset=utf-8',
                'Content-Length': 'length'
            };

            var responseXML;
            try {
                var response = https.post({
                    url: requestURL,
                    body: xmlorderStatus,
                    headers: headers

                });
                responseXML = response.body ;
                log.debug({
                    title: 'D and H Scheduled',
                    details: 'DandH response length '+responseXML.length
                });

            }
            catch (err) {
                log.debug({
                    title: 'D and H Scheduled',
                    details: 'DandH scheduled error = '+err.message
                });
                responseXML = null;
            }

            return responseXML;

        }

        function parseDandH(xmlString) {
            log.debug({
                title: 'D and H Scheduled',
                details: 'ParseDandH'
            });

            // Create XML object from XML text returned from vendor, using Netsuite XML parser
            var itemArray = [];
            var xmlDoc = xml.Parser.fromString({
                text : xmlString
            });

            if (xmlDoc != null){
                var itemNodes = xml.XPath.select({node:xmlDoc, xpath:'//DETAILITEM'});
                if (itemNodes != null && itemNodes.length > 0) {
                    for (var i = 0; i < itemNodes.length; i++) {
                        var xml_items = {line_num:"NA", item_num:"NA", order_num:"NA", order_date:"NA", order_eta:"NA", ship_date:"NA", ship_qty:"NA", tracking_num:"NA", vendorSKU: "NA", carrier:"NA", serial_num:"NA"};

                        var itemNum = getNodeTextContent(xml.XPath.select({node:itemNodes[i], xpath:'ITEMNO'})[0]);
                        if (itemNum != null && itemNum.length > 0) { xml_items.item_num = itemNum; }
                        
                        //D&H does not support a separate vendorSKU as of Jan 9 2019
                        
                        var shipQty = getNodeTextContent(xml.XPath.select({node:itemNodes[i], xpath:'QUANTITY'})[0]);
                        if (shipQty != null && shipQty.length > 0) { xml_items.ship_qty = shipQty; }

                        var orderStatusNode = itemNodes[i].parentNode.parentNode;

                        var orderNum = getNodeTextContent(xml.XPath.select({node:orderStatusNode, xpath:'ORDERNUM'})[0]);
                        if (orderNum != null && orderNum.length > 0) { xml_items.order_num = orderNum; }

                        var orderDateTime = getNodeTextContent(xml.XPath.select({node:orderStatusNode, xpath:'DATE'})[0]);
                        if (orderDateTime != null && orderDateTime.length > 0) { xml_items.order_date = orderDateTime; }

                        var packageNodes = xml.XPath.select({node:orderStatusNode, xpath:'PACKAGE'})
                        if (packageNodes != null && packageNodes.length > 0) {
                            for (var j = 0; j < packageNodes.length; j++) {
                                var itemInPackage = false;
                                var shipItemNodes = xml.XPath.select({node:packageNodes[j], xpath:'SHIPITEM'});
                                if (shipItemNodes != null && shipItemNodes.length > 0) {
                                    for (var x = 0; x < shipItemNodes.length; x++) {
                                        if ( xml.XPath.select({node:shipItemNodes[x], xpath:'SHIPITEMNO'})[0].textContent == itemNum) {
                                            itemInPackage = true;
                                            var serialNum = getNodeTextContent(xml.XPath.select({node:shipItemNodes[x], xpath:'SERIALNO'})[0])
                                            if (serialNum != null && serialNum.length > 0) {
                                                if (xml_items.serial_num == 'NA')
                                                    xml_items.serial_num = serialNum;
                                                else
                                                    xml_items.serial_num += ',' + serialNum;
                                            }

                                        }
                                    }
                                }
                                if (itemInPackage) {
                                    var carrier = xml.XPath.select({node:packageNodes[j], xpath:'CARRIER'})[0].textContent;
                                    if (carrier != null && carrier.length > 0) {
                                        var carrierService = getNodeTextContent(xml.XPath.select({node:packageNodes[j], xpath:'SERVICE'})[0]);
                                        if (carrierService != null && carrierService.length > 0) {
                                            if (xml_items.carrier == 'NA')
                                                xml_items.carrier = carrier + ' - ' + carrierService;
                                            else
                                                xml_items.carrier += ',' + carrier + ' - ' + carrierService;
                                        }
                                        else {
                                            if (xml_items.carrier == 'NA')
                                                xml_items.carrier = carrier;
                                            else
                                                xml_items.carrier += ',' + carrier;
                                        }
                                    }
                                    var trackingNum = getNodeTextContent(xml.XPath.select({node:packageNodes[j], xpath:'TRACKNUM'})[0]);
                                    if (trackingNum != null && trackingNum.length > 0) {
                                        if (xml_items.tracking_num == 'NA')
                                            xml_items.tracking_num = trackingNum;
                                        else
                                            xml_items.tracking_num += ',' + trackingNum;
                                    }

                                    var dateShipped = getNodeTextContent(xml.XPath.select({node:packageNodes[j], xpath:'DATESHIPPED'})[0]);
                                    if (dateShipped != null && dateShipped.length > 0) {
                                        if (xml_items.ship_date == 'NA')
                                            xml_items.ship_date = dateShipped;
                                        else
                                            xml_items.ship_date += ',' + dateShipped;
                                    }
                                }
                            }
                        }
                        itemArray.push(xml_items);
                    }
                }
            }

            return itemArray;
        };

        //****************************************************************
        //** Tech Data Code
        //****************************************************************

        function handleTechData(poNum) {
            log.debug({
                title: 'Tech Data Scheduled',
                details: 'handleechData'
            });

            var responseXML = requestTechData(poNum);
            if (responseXML != null){
                var outputArr = parseTechData(responseXML);
            } else {
                var outputArr = null;
            }

            var outputObj = {"xmlString": responseXML, "itemArray": outputArr};
            return outputObj;
        }

        function requestTechData(poNum) {
            log.debug({
                title: 'Tech Data Scheduled',
                details: 'requestTechData'
            });

            var xmlInvoiceByPOStatus;

            var credentials = decodeCredentials("TechData", poNum);
            if (credentials == null) return (null);
            if (isEmpty(credentials.userName) || isEmpty(credentials.password)) return (null)

            var userName = credentials.userName;
            var password = credentials.password;

            var responseVersion = "1.8";
            var custPONumber = poNum;

            var requestURL =  "https://tdxml.techdata.com/xmlservlet";

            var orderXMLLineData = [];

            xmlInvoiceByPOStatus =
                "<XML_InvoiceDetailByPO_Submit>" +
                "<Header>" +
                "<UserName>"+userName+"</UserName>" +
                "<Password>"+password+"</Password>" +
                "</Header>" +
                "<Detail>" +
                "<POInfo>" +
                "<PONbr>" + custPONumber + "</PONbr>" +
                "</POInfo>" +
                "</Detail>" +
                "</XML_InvoiceDetailByPO_Submit>";

            var headers = {
                'Content-Type': 'text/xml; charset=utf-8',
                'Content-Length': 'length'
            };

            var responseXML;
            try {
                var response = https.post({
                    url: requestURL,
                    body: xmlInvoiceByPOStatus,
                    headers: headers

                });
                responseXML = response.body ;
                log.debug({
                    title: 'Tech Data Scheduled',
                    details: 'length of response '+responseXML.length
                });

                // Remove first two lines of XML response
                responseXML = responseXML.substring(responseXML.indexOf("\n") + 1);
                responseXML = responseXML.substring(responseXML.indexOf("\n") + 1);

            }
            catch (err) {
                log.error({
                    title: 'Tech Data Scheduled',
                    details: 'error = '+err.message
                });
                responseXML = null;
            }

            return responseXML;
        }

        function parseTechData(xmlString) {
            log.debug({
                title: 'Tech Data Scheduled',
                details: 'parseTechData'
            });

            // Create XML object from XML text returned from vendor, using Netsuite XML parser
            var itemArray = [];
            var xmlDoc = xml.Parser.fromString({
                text : xmlString
            });

            if (xmlDoc != null){
                var itemInfoNodes = xml.XPath.select({node:xmlDoc, xpath:'//ItemInfo'});

                if (itemInfoNodes != null) {
                    // Loop through each item node, get XML data fields, store them in xml_items array
                    for (var j = 0; j < itemInfoNodes.length; j++) {
                        // Create array to hold the xml line item info
                        var xml_items = {line_num:"NA", item_num:"NA", order_num:"NA", order_date:"NA", order_eta:"NA", ship_date:"NA", ship_qty:"NA", tracking_num:"NA", vendorSKU: "NA", carrier:"NA", serial_num:"NA"};

                        var orderInfoNode = itemInfoNodes[j].parentNode.parentNode;

                        var orderNum = getNodeTextContent(xml.XPath.select({node:orderInfoNode, xpath:'InvoiceNbr'})[0]);
                        //var orderNum = getNodeTextContent(xml.XPath.select({node:orderInfoNode, xpath:'OrderNbr'})[0]);
                        if (orderNum != null && orderNum.length > 0) { xml_items.order_num = orderNum; }
                        
                        var orderDate = getNodeTextContent(xml.XPath.select({node:orderInfoNode, xpath:'OrderDate'})[0]);
                        if (orderDate != null && orderDate.length > 0) { xml_items.order_date = orderDate; }

                        // Goto ItemInfo parent (ContainerInfo) to get particular data
                        var containerInfoNode = itemInfoNodes[j].parentNode;
                        var containerID = getNodeTextContent(xml.XPath.select({node:containerInfoNode, xpath:'ContainerID'})[0]);
                        if (containerID != null && containerID.length > 0) { xml_items.tracking_num = containerID; }

                        var dateShipped = getNodeTextContent(xml.XPath.select({node:containerInfoNode, xpath:'DateShipped'})[0]);
                        if (dateShipped != null && dateShipped.length > 0) { xml_items.ship_date = dateShipped; }

                        var warehouse = getNodeTextContent(xml.XPath.select({node:containerInfoNode, xpath:'WhseDesc'})[0]);
                        if (warehouse != null && warehouse == 'VENDOR SUPPLIED') { xml_items.carrier = 'VENDOR SUPPLIED'; }

                        var carrier = getNodeTextContent(xml.XPath.select({node:containerInfoNode, xpath:'ShipViaDesc'})[0]);
                        if (carrier != null && carrier.length > 0) { xml_items.carrier = carrier; }

                        var orderLineNumber = getNodeTextContent(xml.XPath.select({node:itemInfoNodes[j], xpath:'OrderLineNbr'})[0]);
                        // Tech data not consistent in returning order line numbers
                        var itemNumber = getNodeTextContent(xml.XPath.select({node:itemInfoNodes[j], xpath:'MfgItemNbr'})[0]);
                        if (itemNumber != null && itemNumber.length > 0) { xml_items.item_num = itemNumber; }
                        var vendorSKU = getNodeTextContent(xml.XPath.select({node:itemInfoNodes[j], xpath:'TechDataItemNbr'})[0]);
                        if (vendorSKU != null && vendorSKU.length > 0) { xml_items.vendorSKU = vendorSKU; }

                        var shipQty = getNodeTextContent(xml.XPath.select({node:itemInfoNodes[j], xpath:'QtyShipped'})[0]);
                        if (shipQty != null && shipQty.length > 0) { xml_items.ship_qty = shipQty; }


                        var serialNumberInfo = getNodeTextContent(xml.XPath.select({node:itemInfoNodes[j], xpath:'SerialNbrInd'})[0]);
                        //if (serialNumberInfo != null && serialNumberInfo =='Y') {

                            var serialNumberInfoNode = xml.XPath.select({node:itemInfoNodes[j], xpath:'SerialNbrInfo'});
                            if (serialNumberInfoNode != null && serialNumberInfoNode.length > 0) {
                                var serialNumberNodes = xml.XPath.select({node:serialNumberInfoNode[0], xpath:'SerialNbr'});

                                //log.debug('serialNumberNodes', serialNumberNodes);

                                for (var x = 0; x < serialNumberNodes.length; x++) {
                                    //var serialNumber = new Array();
                                    //serialNumber = String(serialNumberNodes[x].firstChild);
                                    var serialNumber = serialNumberNodes[x].textContent

                                    //if (serialNumber != null && serialNumber.substring(8).length > 0 )  {
                                    if (serialNumber != null && serialNumber.substring(8).length > 0 )  {
                                        if (xml_items.serial_num === 'NA')
                                            xml_items.serial_num = serialNumber;
                                      //      xml_items.serial_num = serialNumber.substring(8);
                                        else
                                            xml_items.serial_num += ',' + serialNumber
                                        //    xml_items.serial_num += ',' + serialNumber.substring(8);
                                    }
                                }
                            }
                        //}

                        itemArray.push(xml_items);
                    }
                }
            }

            return itemArray;
        };

        //****************************************************************
        //** Ingram Micro Code
        //****************************************************************
        function handleIngramMicro(poNum) {
            log.debug({
                title: 'Ingram Micro Scheduled',
                details: 'handleIngramMicro'
            });

            var responseXML = requestIngramMicro(poNum);
            if (responseXML.detailxml != null){
                var outputArr = parseIngramMicro(responseXML);
            } else {
                var outputArr = null;
            }

            // Not including responseXML.trackingxml for now
            var outputObj = {"xmlString": responseXML.detailxml, "itemArray": outputArr};
            return outputObj;

        }

        function requestIngramMicro(poNum) {
            log.debug({
                title: 'Ingram Micro Scheduled',
                details: 'requestIngramMicro'
            });

            var xmlorderStatus;

            var credentials = decodeCredentials("IngramMicro", poNum);
            if (credentials == null) return (null);
            if (isEmpty(credentials.userName) || isEmpty(credentials.password)) return ("IngramMicro Credentials missing")

            var userName = credentials.userName;
            var password = credentials.password;


            var custPONumber = poNum;
            var requestURL = "https://newport.ingrammicro.com";
            var branchOrderNumber = "";

            log.debug({
                title: 'Ingram Micro Scheduled',
                details: 'custPONumber = '+custPONumber
            });

            var headers = {
                'Content-Type': 'text/xml; charset=utf-8',
                'Content-Length': 'length'
            };

            //get branch order number
            xmlorderStatus =
                '<OrderStatusRequest>' +
                '<Version>2.0</Version>' +
                '<TransactionHeader>' +
                '<SenderID>123456789</SenderID>' +
                '<ReceiverID>987654321</ReceiverID>' +
                '<CountryCode>MD</CountryCode>' +
                '<LoginID>' + userName + '</LoginID>' +
                '<Password>' + password + '</Password>' +
                '<TransactionID>54321</TransactionID>' +
                '</TransactionHeader>' +
                '<OrderHeaderInfo>' +
                '<CustomerPO>' + custPONumber + '</CustomerPO>' +
                '</OrderHeaderInfo>' +
                '</OrderStatusRequest>';
            try {
                var orderNumberResponse = https.post({
                    url: requestURL,
                    body: xmlorderStatus,
                    headers: headers
                });
                var orderNumberXML = xml.Parser.fromString({
                    text : orderNumberResponse.body
                }) ;

                branchOrderNumber = xml.XPath.select({ node:orderNumberXML, xpath: '//BranchOrderNumber' })[0].textContent;
            }
            catch (err) {
                log.debug({
                    title: 'Ingram Micro Scheduled',
                    details: 'requestIngramMicro could not retrieve branchOrderNumber error = '+err.message
                });
                branchOrderNumber = null;
            }

            if (branchOrderNumber != null){
                var orderXMLLineData = [];

                var xmlorderDetailStatus =
                    '<OrderDetailRequest>' +
                    '<Version>2.0</Version>' +
                    '<TransactionHeader>' +
                    '<SenderID>123456789</SenderID>' +
                    '<ReceiverID>987654321</ReceiverID>' +
                    '<CountryCode>MD</CountryCode>' +
                    '<LoginID>' + userName + '</LoginID>' +
                    '<Password>' + password + '</Password>' +
                    '<TransactionID>54321</TransactionID>' +
                    '</TransactionHeader>' +
                    '<OrderHeaderInfo>' +
                    '<BranchOrderNumber>' + branchOrderNumber + '</BranchOrderNumber>' +
                    '<OrderSuffix/>' +
                    '<CustomerPO>' + custPONumber + '</CustomerPO>' +
                    '</OrderHeaderInfo>' +
                    '<ShowDetail>2</ShowDetail>' +
                    '</OrderDetailRequest>';

                var orderTrackingRequest =
                    '<OrderTrackingRequest>' +
                    '<Version>2.0</Version>' +
                    '<TransactionHeader>' +
                    '<SenderID>123456789</SenderID>' +
                    '<ReceiverID>987654321</ReceiverID>' +
                    '<CountryCode>MD</CountryCode>' +
                    '<LoginID>' + userName + '</LoginID>' +
                    '<Password>' + password + '</Password>' +
                    '<TransactionID>54321</TransactionID>' +
                    '</TransactionHeader>' +
                    '<TrackingRequestHeader>' +
                    '<BranchOrderNumber>' + branchOrderNumber + '</BranchOrderNumber>' +
                    '<OrderSuffix/>' +
                    '<CustomerPO>' + custPONumber + '</CustomerPO>' +
                    '</TrackingRequestHeader>' +
                    '<ShowDetail>2</ShowDetail>' +
                    '</OrderTrackingRequest>';

                var responseXML;
                var trackingXML;
                try {
                    var response = https.post({
                        url: requestURL,
                        body: xmlorderDetailStatus,
                        headers: headers
                    });
                    responseXML = response.body;

                    trackingXML = https.post({
                        url: requestURL,
                        body: orderTrackingRequest,
                        headers: headers
                    }).body;

                    log.debug({
                        title: 'Ingram Micro Scheduled',
                        details: 'Ingram Micro response length '+responseXML.length
                    });
                    log.debug({
                        title: 'Ingram Micro Scheduled',
                        details: 'Ingram Micro tracking length '+trackingXML.length
                    });
                }
                catch (err) {
                    log.debug({
                        title: 'Ingram Micro Scheduled',
                        details: 'requestIngramMicro error = '+err.message
                    });

                    responseXML = null;
                    trackingXML = null;
                }
                return {detailxml:responseXML, trackxml:trackingXML} ;
            }
            return {detailxml:null, trackxml:null} ;
        }

        function parseIngramMicro(xmlString) {
            log.debug({
                title: 'Ingram Micro Scheduled',
                details: 'parseIngramMicro'
            });

            var xmlTextIN = xmlString.detailxml;
            var trackingXMLIN = xmlString.trackxml;

            // Create XML object from XML text returned from vendor, using Netsuite XML parser
            var xmlDoc = xml.Parser.fromString({
                text : xmlTextIN
            });
            var trackingXML = xml.Parser.fromString({
                text : trackingXMLIN
            });

            var lineData = [];
            var trackingLineData = [];

            //from this point down, make sure things that are being used as nodes are actually nodes
            if (trackingXML != null) {
                var skuNodes = xml.XPath.select({node:trackingXML, xpath:'//SKU'})
                for (var j = 0; j < skuNodes.length; j++) {
                    var trackingInfo = {sku_num:"NA", tracking_num:"NA", order_num:"NA"};

                    var skuNum = getNodeTextContent(skuNodes[j]);
                    trackingInfo.sku_num = skuNum;

                    var packageNode = skuNodes[j].parentNode.parentNode.parentNode;
                    var orderNode = packageNode.parentNode;

                    trackingInfo.tracking_num = packageNode.getAttribute({name:'ID'});
                    trackingInfo.order_num = orderNode.getAttribute({name:'SuffixNumber'});
                    trackingLineData.push (trackingInfo);

                }
            }
            if (xmlDoc != null){
                var itemNodes = xml.XPath.select({node:xmlDoc, xpath:'//ProductLine'})
                var orderDateTime = getNodeTextContent(xml.XPath.select({node:xmlDoc, xpath:'//OrderEntryDate'})[0])
                var orderNum = getNodeTextContent(xml.XPath.select({node:xmlDoc, xpath:'//BranchOrderNumber'})[0])

                for (var i = 0; i < itemNodes.length; i++) {
                    var xml_items = {line_num:"NA", item_num:"NA", order_num:"NA", order_date:"NA", order_eta:"NA", ship_date:"NA", ship_qty:"NA", tracking_num:"NA", vendorSKU: "NA", carrier:"NA", serial_num:"NA"};

                    var itemLineNode = itemNodes[i];

                    // Goto itemLineNode grand parent (OrderSuffix) to get Carrier & Ship Date
                    var orderSuffixNode = itemLineNode.parentNode.parentNode;
                    var orderSuffixID = orderSuffixNode.getAttribute({name:'ID'});

                    if (orderNum != null && orderNum.length > 0) { xml_items.order_num = orderNum + '-'+orderSuffixID; }
                    if (orderDateTime != null && orderDateTime.length > 0) { xml_items.order_date = orderDateTime; }

                    // Ingram Micro line nums start at 000?  Ingram Micro not returning PO Line Numnbers
                    var itemNum = getNodeTextContent(xml.XPath.select({node:itemLineNode, xpath:'ManufacturerPartNumber'})[0])
                    if (itemNum != null && itemNum.length > 0) { xml_items.item_num = itemNum; }

                    var vendorSKU = getNodeTextContent(xml.XPath.select({node:itemLineNode, xpath:'SKU'})[0])
                    if (vendorSKU != null && vendorSKU.length > 0) { xml_items.vendorSKU = vendorSKU; }

                    var shipQty = getNodeTextContent(xml.XPath.select({node:itemLineNode, xpath:'ShipQuantity'})[0])
                    if (shipQty != null && shipQty.length > 0) { xml_items.ship_qty = shipQty; }

                    var carrier = getNodeTextContent(xml.XPath.select({node:orderSuffixNode, xpath:'Carrier'})[0]);
                    if (carrier != null && carrier.length > 0) { xml_items.carrier = carrier; }

                    var shipDate = getNodeTextContent(xml.XPath.select({node:orderSuffixNode, xpath:'OrderShipDate'})[0]);
                    if (shipDate != null && shipDate.length > 0) { xml_items.ship_date = shipDate; }

                    var serialNumberNodes = xml.XPath.select({node:itemLineNode, xpath:"SkuSerialNumber"});
                    if (serialNumberNodes != null && serialNumberNodes.length > 0) {
                        var serialChildrenNodes = xml.XPath.select({node:serialNumberNodes[0], xpath:"SerialNumber"});
                        for (var x = 0; x < serialChildrenNodes.length; x++) {
                            if (serialChildrenNodes[x].firstChild != null){
                                var serialNum = String(serialChildrenNodes[x].firstChild.textContent);


//							Sometimes Ingram returns serial nums with a prefix: 'SER#: '
//							For now we're just going to grab the whole serail num field
//							serialNum = serialNum.substring(6, serialNum.length);

                            }
                            else
                                var serialNum = null;
                            if (serialNum != null && serialNum.length > 0) {
                                if (xml_items.serial_num === 'NA')
                                    xml_items.serial_num = serialNum;
                                else
                                    xml_items.serial_num += ',' + serialNum;
                            }
                        }


                    }

                    var currentSKUNum = getNodeTextContent(xml.XPath.select({node:itemLineNode, xpath:'SKU'})[0]);

                    if (currentSKUNum != null && currentSKUNum.length > 0) {
                        if (trackingLineData != null && trackingLineData.length > 0) {
                            for (var y = 0; y < trackingLineData.length; y++) {

                                if (currentSKUNum === trackingLineData[y].sku_num && orderSuffixID == trackingLineData[y].order_num) {

                                    if (xml_items.tracking_num === 'NA')
                                        xml_items.tracking_num = trackingLineData[y].tracking_num;
                                    else {
                                        if (xml_items.tracking_num.indexOf(trackingLineData[y].tracking_num) < 0){
                                            xml_items.tracking_num += ',' + trackingLineData[y].tracking_num;
                                            log.debug({
                                                title: 'Ingram Micro Scheduled',
                                                details: 'xml_items.tracking_num = '+xml_items.tracking_num
                                            });

                                        }
                                    }
                                }
                            }
                        }
                    }

                    lineData.push(xml_items);
                }

            }
            return lineData;
        };

        function getNodeTextContent(node){
            if (!isUndefined(node))
                return (node.textContent)
            else
                return null
        }

        function isUndefined(value){
            // Obtain `undefined` value that's guaranteed to not have been re-assigned
            var undefined = void(0);
            return value === undefined;
        }

        function decodeCredentials(company, poNum) {
            var cred;
            var enableSubsidiaries = vcGlobals.ENABLE_SUBSIDIARIES;
            var loginCreds = {userName:"", password:"", customerNum:""};
            if (enableSubsidiaries) {
                var subsidiary = "";
                var purchaseorderSearchObj = search.create({
                    type: "purchaseorder",
                    filters:
                    [
                    ["type","anyof","PurchOrd"], 
                    "AND", 
                    ["numbertext","is",poNum],
                    "AND",
                    ["mainline", "is", true ]
                    ],
                    columns:
                    [
                        search.createColumn({name: "subsidiary"}),
                    ]
                });
                var searchResultCount = purchaseorderSearchObj.runPaged().count;
                log.debug("purchaseorderSearchObj result count",searchResultCount);
                purchaseorderSearchObj.run().each(function(result){
                    subsidiary = result.getValue('subsidiary');
                
                    return false;
                });
            

                //var subsidiary = poRec.getValue('subsidiary');
                log.debug('decodeCredentials:subsidiary', subsidiary)
            
                try {
                    //var myFilters2 = [];
                    //myFilters2.push(['custrecord_vc_subsidiary', search.Operator.IS, subsidiary] );
                    //log.debug('decodeCredentials:myfilters2', myFilters2)
                    var results2 = search.create({
                        type: 'customrecord_vc_config',
                        filters: ['custrecord_vc_subsidiary', search.Operator.IS, subsidiary]
                    }).run().getRange({
                        start: 0,
                        end: 1
                    })
                    log.debug('decodeCredentials:results2', results2)
                    if (results2) {
                        cred = r.load({
                            type: 'customrecord_vc_config',
                            id: results2[0].id
                        });
                    }
                    else {
                        return null;
                    }
            }
            catch (err) {
                log.error('error retrieving credentials', err.message)
            }
                

            }
            else {
                cred = r.load({
                    type: 'customrecord_vc_config',
                    id: 1
                });
            }

            if (company == 'Synnex'){
                loginCreds.userName = cred.getValue({fieldId: 'custrecord_vc_synnex_user'});
                loginCreds.password = cred.getValue({fieldId: 'custrecord_vc_synnex_pass'}).replace('&', '&amp;');
                loginCreds.customerNum = cred.getValue({fieldId: 'custrecord_vc_synnex_customernum'});
                return loginCreds;
            }
            else if (company == 'DandH'){
                loginCreds.userName = cred.getValue({fieldId: 'custrecord_vc_dandh_user'});
                loginCreds.password = cred.getValue({fieldId: 'custrecord_vc_dandh_pass'}).replace('&', '&amp;');
                return loginCreds;
            }
            else if (company == 'IngramMicro'){
                loginCreds.userName = cred.getValue({fieldId: 'custrecord_vc_ingrammicro_user'});
                loginCreds.password = cred.getValue({fieldId: 'custrecord_vc_ingrammicro_pass'}).replace('&', '&amp;');
                return loginCreds;
            }
            else if (company == 'TechData'){
                loginCreds.userName = cred.getValue({fieldId: 'custrecord_vc_techdata_user'});
                loginCreds.password = cred.getValue({fieldId: 'custrecord_vc_techdata_pass'}).replace('&', '&amp;');
                log.debug({
                    title: 'TechData info',
                    details: 'user = '+ loginCreds.userName + ' pass = ' + loginCreds.password
                });

                return loginCreds;
            }

            return null;
        };
        function isEmpty(stValue) {
            if ((stValue == '') || (stValue == null) || (stValue == undefined)) {
                return true;
            } else {
                if (typeof stValue == 'string') {
                    if ((stValue == '')) {
                        return true;
                    }
                } else if (typeof stValue == 'object') {
                    if (stValue.length == 0 || stValue.length == 'undefined') {
                        return true;
                    }
                }
                return false;
            }
        }

        return {
            synnex: handleSynnex,
            dandh: handleDandH,
            techdata: handleTechData,
            ingram: handleIngramMicro
        };

    });